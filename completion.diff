# HG changeset patch
# Parent 4a1b771880d830a75f83593b31493c0874166b13
# User Thaddee Tyl <thaddee.tyl@gmail.com>
Bug 762164 — Implement Autocompletion in the Source Editor

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1121,6 +1121,7 @@ pref("devtools.hud.loglimit.console", 20
 // - expandtab: expand Tab characters to spaces.
 pref("devtools.editor.tabsize", 4);
 pref("devtools.editor.expandtab", true);
+pref("devtools.editor.autocomplete.enabled", true);
 
 // Tells which component you want to use for source editing in developer tools.
 //
diff --git a/browser/devtools/scratchpad/scratchpad.js b/browser/devtools/scratchpad/scratchpad.js
--- a/browser/devtools/scratchpad/scratchpad.js
+++ b/browser/devtools/scratchpad/scratchpad.js
@@ -378,6 +378,20 @@ var Scratchpad = {
   },
 
   /**
+   * Get the sandbox currently in use (either the chrome sandbox, or the tab
+   * content sandbox).
+   *
+   * @return mixed
+   *         The sandbox currently in use.
+   */
+  getSandbox: function SP_getSandbox()
+  {
+    return this.executionContext == SCRATCHPAD_CONTEXT_CONTENT ?
+           this.contentSandbox :
+           this.chromeSandbox;
+  },
+
+  /**
    * Execute the selected text (if any) or the entire editor content in the
    * current context.
    * @return mixed
@@ -1179,11 +1193,14 @@ var Scratchpad = {
 
     this.editor = new SourceEditor();
 
+    let getSandbox = this.getSandbox.bind(this);
     let config = {
       mode: SourceEditor.MODES.JAVASCRIPT,
       showLineNumbers: true,
       initialText: initialText,
       contextMenu: "scratchpad-text-popup",
+      autocompleteEnabled: true,
+      getSandbox: getSandbox,
     };
 
     let editorPlaceholder = document.getElementById("scratchpad-editor");
diff --git a/browser/devtools/scratchpad/test/Makefile.in b/browser/devtools/scratchpad/test/Makefile.in
--- a/browser/devtools/scratchpad/test/Makefile.in
+++ b/browser/devtools/scratchpad/test/Makefile.in
@@ -36,6 +36,7 @@ MOCHITEST_BROWSER_FILES = \
 		browser_scratchpad_bug_751744_revert_to_saved.js \
 		browser_scratchpad_bug740948_reload_and_run.js \
 		browser_scratchpad_bug_661762_wrong_window_focus.js \
+		browser_scratchpad_bug_762164_autocompletion.js \
 		head.js \
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/scratchpad/test/browser_scratchpad_bug_660560_tab.js b/browser/devtools/scratchpad/test/browser_scratchpad_bug_660560_tab.js
--- a/browser/devtools/scratchpad/test/browser_scratchpad_bug_660560_tab.js
+++ b/browser/devtools/scratchpad/test/browser_scratchpad_bug_660560_tab.js
@@ -36,22 +36,22 @@ function runTests()
 
   is(sp.editor.getCaretOffset(), 5, "caret location is correct");
 
-  sp.editor.setCaretOffset(6);
+  sp.editor.setCaretOffset(16);
 
   EventUtils.synthesizeKey("VK_TAB", {}, gScratchpadWindow);
 
-  is(sp.getText(), "     w    indow.foo;",
+  is(sp.getText(), "     window.foo;    ",
      "Tab key added 4 spaces");
 
-  is(sp.editor.getCaretOffset(), 10, "caret location is correct");
+  is(sp.editor.getCaretOffset(), 20, "caret location is correct");
 
   // Test the new insertTextAtCaret() method.
 
   sp.insertTextAtCaret("omg");
 
-  is(sp.getText(), "     w    omgindow.foo;", "insertTextAtCaret() works");
+  is(sp.getText(), "     window.foo;    omg", "insertTextAtCaret() works");
 
-  is(sp.editor.getCaretOffset(), 13, "caret location is correct after update");
+  is(sp.editor.getCaretOffset(), 23, "caret location is correct after update");
 
   gScratchpadWindow.close();
 
diff --git a/browser/devtools/scratchpad/test/browser_scratchpad_bug_762164_autocompletion.js b/browser/devtools/scratchpad/test/browser_scratchpad_bug_762164_autocompletion.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/scratchpad/test/browser_scratchpad_bug_762164_autocompletion.js
@@ -0,0 +1,48 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test() {
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onTabLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onTabLoad, true);
+
+    ok(window.Scratchpad, "Scratchpad variable exists");
+
+    Services.prefs.setIntPref("devtools.editor.tabsize", 5);
+
+    openScratchpad(runTests);
+  }, true);
+
+  content.location = "data:text/html,Scratchpad test for the Tab key, bug 660560";
+}
+
+function runTests() {
+  // 1. Test automatic insertion.
+
+  let sp = gScratchpadWindow.Scratchpad;
+
+  sp.setText("window.O");
+  // Position the cursor after the "O".
+  sp.editor.setCaretOffset(8);
+
+  EventUtils.synthesizeKey("VK_TAB", {}, gScratchpadWindow);
+
+  is(sp.getText(), "window.Object",
+     "Autocompletion of window.O → window.Object");
+
+  // 2. Test the existence of the popover.
+
+  sp.setText("window.F");
+  sp.editor.setCaretOffset(8);
+
+  EventUtils.synthesizeKey("VK_TAB", {}, gScratchpadWindow);
+
+  let popover = sp.editor._autocomplete.popover;
+  is(popover.style.display, "block",
+     "Autocompletion of window.F gives a popover");
+
+  finish();
+}
diff --git a/browser/devtools/sourceeditor/Makefile.in b/browser/devtools/sourceeditor/Makefile.in
--- a/browser/devtools/sourceeditor/Makefile.in
+++ b/browser/devtools/sourceeditor/Makefile.in
@@ -19,3 +19,6 @@ EXTRA_JS_MODULES = \
 	$(NULL)
 
 include $(topsrcdir)/config/rules.mk
+
+libs::
+	$(NSINSTALL) $(srcdir)/autocompletion.jsm $(FINAL_TARGET)/modules/devtools
diff --git a/browser/devtools/sourceeditor/autocompletion.jsm b/browser/devtools/sourceeditor/autocompletion.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/autocompletion.jsm
@@ -0,0 +1,900 @@
+/* vim:set ts=2 sw=2 sts=2 et tw=80:
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const Cu = Components.utils;
+Cu.import("resource://gre/modules/devtools/WebConsoleUtils.jsm");
+Cu.import("resource://gre/modules/reflect.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "AutocompletePopup",
+                                  "resource:///modules/AutocompletePopup.jsm");
+
+
+var EXPORTED_SYMBOLS = ["Autocompletion"];
+
+/**
+ * Create a new popover. It gets a "div.popover" class.
+ * It starts invisible (display: none).
+ *
+ * @param object aDocument
+ *        The DOM document in which to add a popover.
+ * @param string aCssClass
+ *        The CSS class that you want it to have (optional).
+ *        Defaults to "autocomplete".
+ * @return object
+ *         The DOM element representing the popover.
+ */
+function createPopover(aDocument, aCssClass = "autocomplete") {
+  let document = aDocument;
+  let cssClass = aCssClass;
+  let popover = document.createElement("div");
+  popover.classList.add("popover");
+  if (cssClass) {
+    popover.classList.add(cssClass);
+  }
+  popover.style.position = "absolute";
+  popover.style.display = "none";
+  popover.scrollTop = 0;
+  document.body.appendChild(popover);
+  return popover;
+}
+
+const NUM_VISIBLE_COMPLETIONS = 10;
+const DELAYED_POPUP = 150;
+
+/**
+ * Autocompletion object.
+ * This constructor creates the necessary DOM popup.
+ *
+ * @param object aEditor
+ *        The Source Editor instance to target.
+ * @param object aOptions
+ *        Properties for tuning certain defaults:
+ *        - numVisibleCompletions (defaults to NUM_VISIBLE_COMPLETIONS): number
+ *          of visible completions with respect to all possible completions.
+ *        - cssClass (defaults to "autocomplete"): CSS class used to style the
+ *          autocompletion popup.
+ *        - getSandbox (defaults to null): function to get a sandbox environment
+ *          to evaluate expressions for dynamic autocompletion purposes.
+ *
+ *  @see NUM_VISIBLE_COMPLETIONS
+ */
+function Autocompletion(aEditor, aOptions = {}) {
+  this.numVisibleCompletions = aOptions.numVisibleCompletions ||
+      NUM_VISIBLE_COMPLETIONS;
+  this.getSandbox = aOptions.getSandbox || null;
+  if (this.getSandbox) {
+    Cu.evalInSandbox("", this.getSandbox());  // Initialize the sandbox.
+  }
+  this.editor = aEditor;
+  this.document = aEditor.editorElement.contentDocument;
+
+  // Create the popover.
+  this.popover = createPopover(this.document, aOptions.cssClass);
+  this.popover = new AutocompletePopup(this.document);
+  this.popover.openPopup();
+  // Track clicking on options.
+  this.popover.onClick = this._clickOnOption.bind(this);
+  this.popover.onSelect = this.onAutocompleteSelect.bind(this);
+
+  // The following will fire the autocompletion system on each character!
+  this.editor.editorElement.addEventListener("keypress",
+      this._onEditorKeyPress.bind(this));
+  this.editor.addEventListener("Selection", this._onEditorSelection.bind(this));
+
+  // Those will become event listeners.
+  this.stop = this.stop.bind(this);
+  this._onEditorKeyDown = this._onEditorKeyDown.bind(this);
+}
+
+Autocompletion.prototype = {
+
+  getSandbox: null,
+  numVisibleCompletions: NUM_VISIBLE_COMPLETIONS,
+
+  // The following are useful DOM elements.
+  editor: null,
+  document: null,
+  popover: null,
+
+  // When the autocompletion is triggered, it is "on",
+  // and the index gives us the selected candidate.
+  _on: false,
+  _index: 0,
+  // When we are going through candidates one by one, we are cycling.
+  // Then, '_start' is the offset to when we start autocompleting candidates,
+  // and '_end' marks the end offset of the inserted candidate.
+  _cycling: false,
+  _start: 0,
+  _end: 0,
+  // While in the process of autocompleting, we are inserting text (this
+  // variable is used to avoid race conditions.
+  _insertingText: false,
+  _completion: null,
+  // Static analysis would better be cached.
+  _staticCandidates: null,
+  // If this switch is on, we will run the static analysis next time we trigger
+  // autocompletion.
+  _fireStaticAnalysis: true,
+
+  _delayedPopup: null,
+
+  runCompleters: function AC_runCompleters()
+  {
+    if (COMPLETERS[this.editor.getMode()]) {
+      // The following line may be computationally intensive.
+      this._completion = COMPLETERS[this.editor.getMode()].bind(this)();
+    } else {
+      this._completion = {};
+    }
+  },
+
+  /**
+   * Show the completions that are asked for.
+   * This function assumes there exists a
+   * popover (see function createPopover()).
+   */
+  displayCompletion: function AC_displayCompletion()
+  {
+    if (this._completion == null) {
+      this.runCompleters();
+    }
+    let completions = this._completion.candidates;
+
+    // Show the popover.
+    let ed = this.editor;
+    let sel = ed.getSelection();
+    // We don't complete on a selection of text.
+    // We don't show the completion popover without any completion.
+    if (sel.start != sel.end || completions.length < 1) {
+      this.hideCompletion();
+      return;
+    }
+
+    // The first child is a <select> element.
+    let html = "<select>";
+    let selectElement = this.document.createElement("select");
+    for (let i = 0; i < completions.length; i++) {
+      // The first option gets selected by default.
+      html += "<option " + (i == this._index ? "selected='true'" : "") + ">" +
+        completions[i] + "</option>";
+      let optionElement = this.document.createElement("option");
+      optionElement.textContent = completions[i];
+      if (i == this._index) {
+        optionElement.setAttribute("selected", "true");
+      }
+      selectElement.appendChild(optionElement);
+    }
+    html += "</select>";
+    this.popover.innerHTML = html;
+    if (this.popover.firstChild) {
+      this.popover.removeChild(this.popover.firstChild);
+    }
+    this.popover.appendChild(selectElement);
+
+    this.popover.setItems(completions.map(function(l) { return {label:l}; }));
+    this.popover.selectedIndex = this._index;
+
+    // Track clicking on options.
+    this.popover.firstChild.addEventListener("click",
+        this._clickOnOption.bind(this));
+    this.popover.firstChild.size =
+      Math.min(this.numVisibleCompletions, completions.length);
+
+    // Positioning the popover.
+    let coord = ed.getLocationAtOffset(ed.getCaretOffset());
+    let caret = ed.getCaretPosition();
+    coord.y += ed.getLineHeight(caret.line);
+    ed.convertDocumentCoordsToView(coord);
+    if (!this._cycling) {
+      this.popover.style.left = coord.x + "px";
+    }
+    this.popover.style.top = coord.y + "px";
+    this.popover.style.display = "block";
+
+    // Adjust the position of the popover to ensure it fits in the viewport.
+    let dwidth = this.document.documentElement.clientWidth;
+    let dheight = this.document.documentElement.clientHeight;
+    if (coord.y + this.popover.offsetHeight > dheight) {
+      this.popover.style.top = (coord.y - this.popover.offsetHeight
+                                - ed.getLineHeight(caret.line)) + "px";
+    }
+    if (coord.x + this.popover.offsetWidth > dwidth) {
+      this.popover.style.left = (dwidth - this.popover.offsetWidth) + "px";
+    }
+
+    // Select the correct entry.
+    this.popover.firstChild.selectedIndex = this._index;
+
+    // Preparing the editor for turning it off,
+    // and then we turn it on.
+    this.editor.addEventListener("TextChanged",
+                                 this.stop);
+    this.editor.addEventListener("Selection",
+                                 this.stop);
+    this.editor.editorElement.addEventListener("keydown",
+                                 this._onEditorKeyDown, true);
+    this._on = true;
+  },
+
+  // Specific autocompletion-only keys.
+  _onEditorKeyDown: function AC__onEditorKeyDown(aEvent)
+  {
+    if (aEvent.keyCode == aEvent.DOM_VK_ESCAPE) {      // ESC key.
+      this.stop();
+      if (this._cycling) {
+        this.editor.setText("", this._start, this._end);
+      }
+      aEvent.stopPropagation();
+    } else if (aEvent.keyCode == aEvent.DOM_VK_UP) {   // ↑ key.
+      if (this._on) {
+        this.cycle(-1);
+        aEvent.stopPropagation();
+        aEvent.preventDefault();
+      }
+    } else if (aEvent.keyCode == aEvent.DOM_VK_DOWN) { // ↓ key.
+      if (this._on) {
+        if (!this._cycling) {
+          this.cycle(2);
+        } else {
+          this.cycle();
+        }
+        aEvent.stopPropagation();
+        aEvent.preventDefault();
+      }
+    }
+  },
+
+  _onEditorKeyPress: function AC__onEditorKeyPress(aEvent)
+  {
+    if (!this._insertingText) {
+      if (aEvent.keyCode == aEvent.DOM_VK_RETURN) {
+        this._fireStaticAnalysis = true;
+      }
+      if (aEvent.charCode) {
+        this.document.defaultView.clearTimeout(this._delayedPopup);
+        this._delayedPopup = this.document.defaultView
+            .setTimeout(this.displayCompletion.bind(this), DELAYED_POPUP);
+      }
+    }
+  },
+
+  _onEditorSelection: function AC__onEditorSelection(aEvent)
+  {
+    // If the distance between the old position and the new is bigger than 1,
+    // the static analysis is worth updating.
+    if ((aEvent.oldValue.start - aEvent.newValue.start) *
+        (aEvent.oldValue.start - aEvent.newValue.start) > 1) {
+      this._fireStaticAnalysis = true;
+    }
+  },
+
+  _clickOnOption:  function AC__clickOnOption()
+  {
+    if (this._cycling) {
+      this.cycle(this.popover.firstChild.selectedIndex - this._index);
+    } else {
+      this.cycle(this.popover.firstChild.selectedIndex + 1);
+    }
+    this.editor.focus();
+  },
+
+  /**
+   * Make the completion popup invisible.
+   */
+  hideCompletion: function AC_hideCompletion()
+  {
+    this.popover.style.display = "none";
+    this.popover.hidePopup();
+    this.editor.removeEventListener("TextChanged",
+                                    this.stop);
+    this.editor.removeEventListener("Selection",
+                                    this.stop);
+    this.editor.editorElement.removeEventListener("keydown",
+                                    this._onEditorKeyDown, true);
+    this._completion = null;
+    this._on = false;
+    this._index = 0;
+  },
+
+  /**
+   * Cycle through autocompletion entries.
+   *
+   * @param number aCount
+   *        The number of completions to advance to / go back to.
+   */
+  cycle: function AC_cycle(aCount = 1)
+  {
+    if (this._cycling) {
+      this._index += aCount;
+      if (this._index >= this._completion.candidates.length) {
+        // Go back to the start.
+        this._index = 0;
+      } else if (this._index < 0) {
+        // Go back to the end.
+        this._index = this._completion.candidates.length - 1;
+      }
+      this.popover.firstChild.selectedIndex = this._index;
+      this.popover.selectedIndex = this._index;
+
+      // Insert the corresponding entry.
+      this.insert(this._completion.completions[this._index]);
+
+    } else {  // We are not yet cycling.
+      // Making a new spot in the undo stack allows the user
+      // to undo the autocompletion.
+      this.editor.startCompoundChange();
+
+      this.runCompleters();
+      if (aCount == 0) {
+        this._index = 0;
+      } else if (aCount > 0) {
+        // We can start from the beginning.
+        this._index = aCount - 1;
+      } else if (aCount < 0) {
+        // We can also start at the end.
+        this._index = this._completion.candidates.length + aCount;
+      }
+
+      // Only do something if we have a completion to work with.
+      if (this._completion.candidates.length > 0) {
+        // If there is a choice to make, show the choice.
+        if (this._completion.candidates.length > 1) {
+          this.displayCompletion();
+          this._cycling = true;
+        } else {
+          // If we don't cycle, we should consider the change done.
+          this.editor.endCompoundChange();
+        }
+
+        // Now, show the first entry.
+        // We only do that now, because the popover must appear at the position
+        // that the cursor initially had.
+        this._start = this._end = this.editor.getCaretOffset();
+        this.insert(this._completion.completions[this._index]);
+
+        // If the popup was already displayed, hide it.
+        if (this._completion.candidates.length <= 1) {
+          this.hideCompletion();
+        }
+      }
+    }
+  },
+
+  /**
+   * Insert a possible autocompletion in the editor.
+   *
+   * @param string aText
+   *        The text to insert inline.
+   */
+  insert: function AC_insert(aText)
+  {
+    this._insertingText = true;
+    this.editor.setText(aText, this._start, this._end);
+    this._end = this._start + aText.length;
+    this._insertingText = false;
+  },
+
+  /**
+   * Make the autocompletion popover go away, remove useless data.
+   *
+   * @return boolean
+   *         Whether the stop operation was successful.
+   */
+  stop: function AC_stop()
+  {
+    // If the autocompletion system is going through an operation,
+    // we cannot stop it.
+    if (this._insertingText) { return false; }
+    this.hideCompletion();
+    this._cycling = false;
+    this.editor.endCompoundChange();
+    return true;
+  },
+
+};
+
+
+// Map from language file extensions to functions that can autocomplete the
+// source editor, assuming that, for each function, |this| is an
+// instance of Autocompletion.
+const COMPLETERS = {
+  /**
+   * Get a list of completions we can have, based on the state of the editor.
+   * Autocompletion happens based on the following factors
+   * (with increasing relevance):
+   *
+   * Level 0 = JS keywords.
+   * Level 1 = dynamic lookup of available properties.
+   * Level 2 = static analysis of the code.
+   *
+   * Use candidates for UI purposes, and completions when inserting the completion
+   * in the editor.
+   *
+   * @return object completion
+   *         An object with the following fields:
+   *         - candidates: A list of the matches to a possible completion.
+   *         - completions: A list of the associated completion to a candidate.
+   */
+  js: function AC_JSCompleter()
+  {
+    let caret = this.editor.getCaretPosition();
+    let line = this.editor.getLine(caret.line);
+    let root = line.substr(0, caret.col);
+
+    let candidates = [];
+    let completions = [];
+
+    // We use a primitive sorting algorithm.
+    // The candidates are simply concatenated, level after level.
+    // We assume that Level 0 < Level 1 < etc.
+
+    let source = this.editor.getText();
+    let identifier = getIdentifier(source, this.editor.getCaretOffset());
+
+    // Static analysis (Level 2).
+
+    // Only do this (possibly expensive) operation once every new line.
+    if (this._staticCandidates == null || this._fireStaticAnalysis) {
+      this._staticCandidates = getStaticScope(source, caret.line + 1, caret.col)
+                               || this._staticCandidates;
+      this._fireStaticAnalysis = false;
+    }
+    let allStaticCandidates = this._staticCandidates;
+    // Right now, we can only complete variables.
+    if (identifier.indexOf(".") == -1 && identifier.indexOf("[") == -1 &&
+        identifier.length != 0 && allStaticCandidates != null) {
+      let staticCandidates = [];
+      for (let [candidate, weight] of allStaticCandidates) {
+        // The candidate must match and have something to add!
+        if (candidate.indexOf(identifier) == 0
+            && candidate.length > identifier.length) {
+          staticCandidates.push(candidate);
+        }
+      }
+      staticCandidates.sort(function(a, b) {
+        // Sort them according to nearest scope.
+        return allStaticCandidates.get(b) - allStaticCandidates.get(a);
+      });
+      candidates = candidates.concat(staticCandidates);
+      completions = completions.concat(staticCandidates
+        .map(function(candidate) {
+            return candidate.slice(identifier.length);
+        }));
+    }
+
+    // Sandbox-based candidates (Level 1).
+
+    if (this.getSandbox) {
+      let sandboxCompletion = JSPropertyProvider(this.getSandbox(), root);
+      if (sandboxCompletion) {
+        sandboxCompletion.matches = sandboxCompletion.matches
+          .filter(function(candidate) {
+            // We are removing candidates from level 2.
+            if (allStaticCandidates == null)  return true;
+            return !allStaticCandidates.has(candidate);
+        });
+        candidates = candidates.concat(sandboxCompletion.matches);
+        completions = completions.concat(sandboxCompletion.matches
+          .map(function(candidate) {
+            return candidate.slice(sandboxCompletion.matchProp.length);
+          }));
+      }
+    }
+
+    // Keyword-based candidates (Level 0).
+
+    const keywords = [
+      "break", "case", "catch", /* "class", */ "const", "continue", "debugger",
+      "default", "delete", "do", "else", "export", "false", "finally", "for",
+      "function", "get", "if", "import", "in", "instanceof", "let", "new",
+      "null", "of", "return", "set", "super", "switch", "this", "true", "throw",
+      "try", "typeof", "undefined", "var", "void", "while", "with",
+    ];
+    // This autocompletion is not meaningful when we type a property…
+    if (identifier.indexOf(".") == -1 && identifier.indexOf("[") == -1 &&
+        identifier.length !== 0) {
+      for (let keyword of keywords) {
+        // The keyword must match and have something to add!
+        if (keyword.indexOf(identifier) == 0
+            && keyword.length > identifier.length) {
+          candidates.push(keyword);
+          completions.push(keyword.slice(identifier.length));
+        }
+      }
+    }
+
+    return {
+      candidates: candidates,
+      completions: completions,
+    };
+  },
+};
+
+
+
+
+// Below this point are helper functions.
+
+
+
+/**
+ * Get all the variables in a JS script at a certain position.
+ * This gathers variable (and argument) names by means of a static analysis
+ * which it performs on a parse tree of the code.
+ *
+ * This static scope system is inflexible. If it can't parse the code, it won't
+ * give you anything.
+ *
+ * @param string aScript
+ *        The JS script to parse.
+ * @param number aLine
+ *        The line in the script from which we want the scope.
+ * @param number aColumn
+ *        The column in the script from which we want the scope.
+ * @param object aStore
+ *        (Optional) The object we return. Use to avoid allocation.
+ * @param number aDepth
+ *        (Optional) A starting point for indicating how deeply nested variables
+ *        are.
+ *
+ * @return Map|null
+ *         A map from all variable names to a number reflecting how deeply
+ *         nested in the scope the variable was. A bigger number reflects a more
+ *         deeply nested variable.
+ *         We return null if we could not parse the code.
+ */
+function getStaticScope(aScript, aLine, aColumn, aStore = new Map(), aDepth = 0) {
+  let tree;
+  try {
+    tree = Reflect.parse(aScript);
+  } catch (e) { return null; }
+
+  let node = tree.body;
+  let stack = [];
+  let index = 0;
+  let indices = [];
+  let deeper = null;
+  do {
+    deeper = null;
+    for (; index < node.length; index++) {
+      let subnode = node[index];
+      while (["ReturnStatement", "VariableDeclarator", "ExpressionStatement",
+              "AssignmentExpression", "Property"].indexOf(subnode.type) >= 0) {
+        if (subnode.type == "ReturnStatement") {
+          subnode = subnode.argument;
+        }
+        if (subnode.type == "VariableDeclarator") {
+          // Variable names go one level too deep.
+          aStore.set(subnode.id.name, stack.length - 1);
+          if (!!subnode.init) {
+            subnode = subnode.init;
+          }
+          else break;
+        }
+        if (subnode.type == "ExpressionStatement") {
+          subnode = subnode.expression;  // Parenthesized expression.
+        }
+        if (subnode.type == "AssignmentExpression") {
+          subnode = subnode.right;       // f.g = function(){…};
+        }
+        if (subnode.type == "Property") {
+          subnode = subnode.value;       // {f: function(){…}};
+        }
+      }
+      if (subnode.type == "FunctionDeclaration" ||
+          subnode.type == "FunctionExpression" ||
+          // Expressions, eg, (function(){…}());
+          (subnode.callee && subnode.callee.type == "FunctionExpression")) {
+        if (subnode.callee) {
+          subnode = subnode.callee;
+        }
+        if (subnode.id) {
+          aStore.set(subnode.id.name, stack.length);
+        }
+        if (caretInBlock(subnode, aLine, aColumn)) {
+          // Parameters are one level deeper than the function's name itself.
+          argumentNames(subnode.params, aStore, stack.length + 1);
+        }
+      }
+      deeper = nestedNodes(subnode, aLine, aColumn);
+      if (!!deeper) {
+        // We need to go deeper.
+        stack.push(node);
+        node = deeper;
+        indices.push(index + 1);
+        index = 0;
+        break;
+      } else deeper = null;
+    }
+    if (!deeper) {
+      node = stack.pop();
+      index = indices.pop();
+    }
+  } while (stack.length > 0 || (node && index < node.length) || !!deeper);
+
+  return aStore;
+}
+
+/**
+ * Find a parse node to iterate over.
+ * @param mixed aNode
+ *        JS parse tree node.
+ * @param number aLine
+ *        Line on which the caret is.
+ * @param number aColumn
+ *        Column on which the caret is.
+ * @return array
+ *         The node's array. Can also return null if it gets unhappy.
+ */
+function nestedNodes(aNode, aLine, aColumn) {
+  let body = null;
+  let newScope = true;  // Whether we enter a new scope.
+  if (aNode.body) {
+    if (aNode.body.body) {
+      // Function declaration has a body in a body.
+      body = aNode.body.body;
+    } else {
+      body = aNode.body;
+    }
+  } else if (aNode.consequent) {
+    body = aNode.consequent.body;  // If statements.
+  } else if (aNode.alternate) {
+    body = aNode.alternate.body;   // If/else statements.
+  } else if (aNode.block) {
+    body = aNode.block.body;       // Try statements.
+  } else if (aNode.handlers) {     // Try/catch.
+    body = aNode.handlers.body.body;
+  } else if (aNode.finalizer) {
+    body = aNode.finalizer.body;   // Try/catch/finally.
+  } else if (aNode.declarations) {
+    body = aNode.declarations;     // Variable declarations.
+    newScope = false;
+  } else if (aNode.arguments) {
+    body = aNode.arguments;   // Function calls, eg, f(function(){…});
+  } else if (aNode.properties) {
+    body = aNode.properties;  // Objects, eg, ({f: function(){…}});
+  } else if (aNode.elements) {
+    body = aNode.elements;    // Array, eg, [function(){…}]
+  }
+  if (!body ||
+      // No need to parse a scope in which the caret is not.
+      (newScope && !caretInBlock(aNode, aLine, aColumn))) {
+    return null;
+  }
+  return body;
+}
+
+/**
+ * @param mixed aNode
+ *        The parse tree node in which the caret might be.
+ * @param number aLine
+ *        The line where the caret is (starts with 1).
+ * @param number aColumn
+ *        The column where the caret is (starts with 0).
+ * @return boolean
+ *         Whether the caret is in the piece of code represented by the node.
+ */
+function caretInBlock(aNode, aLine, aColumn) {
+  return (
+    // The aNode starts before the cursor.
+    (aNode.loc.start.line < aLine ||
+     (aNode.loc.start.line === aLine &&
+      aNode.loc.start.column <= aColumn)) &&
+    // The aNode ends after the cursor.
+    (aLine < aNode.loc.end.line ||
+     (aNode.loc.end.line === aLine &&
+      aColumn <= aNode.loc.end.column)));
+}
+
+/**
+ * Get the argument names of a function.
+ * @param array aNode
+ *        The "params" property of a FunctionExpression.
+ * @param Map aStore
+ *        Where to store the information that an identifier exists and has the
+ *        given weight.
+ * @param number aWeight
+ *        A measure of how deeply nested the node is. The deeper, the bigger.
+ */
+function argumentNames(aNode, aStore, aWeight) {
+  let aNode = aNode;
+  let aStore = aStore;
+  let aWeight = aWeight;
+  for (let i = 0; i < aNode.length; i++) {
+    aStore.set(aNode[i].name, aWeight);
+  }
+}
+
+
+// States.
+const STATES = {
+  // IDEN can be things like `foo[bar /* quux */].baz`.
+  IDEN     : 1, // identifier
+  IDEN_SP  : 2, // special chars in identifiers (spaces, dots, brackets).
+  REGEX    : 3, // regular expression
+  COMMENT  : 4, // comment
+
+  // Relevant character codes.
+  // May be used as states.
+  ETHER   : 0,  // ∅
+  QUOTE   : 39, // '
+  DQUOTE  : 34, // "
+  BSLASH  : 92, // \
+  SLASH   : 47, // /
+  STAR    : 42, // *
+  LF      : 10, // \n
+  DOT     : 46, // .
+  BRACK   : 91, // [
+  CBRACK  : 93, // ]
+};
+
+// Compiled '>=!|<+-&*%^/{}()[];,~?:\\/\'"' to a map.
+const PUNCTUATION = {62:1, 61:1, 33:1, 124:1, 60:1, 43:1, 45:1, 38:1, 42:1, 37:1, 94:1, 47:1, 123:1, 125:1, 40:1, 41:1, 91:1, 93:1, 59:1, 44:1, 126:1, 63:1, 58:1, 92:1, 39:1, 34:1};
+
+/**
+ * Behold the line parser!
+ *
+ * @param string aSource
+ *        Some JS code.
+ * @param number aOffset
+ *        The position of a caret, the line on which it is positioned we will
+ *        parse.
+ *
+ * @return object
+ *         - state: The state in which we end up.
+ *         - index: The offset of the start of the element we last parsed.
+ */
+function lineParser(aSource, aOffset = source.length) {
+  // Find beginning of line.
+  let bol = aOffset - 1;  // We may be *on* a newline, we want the previous line.
+  for (;aSource[bol] !== "\n" && aSource[bol] !== "\u2028" && aSource[bol] !== "\u2029"
+       && bol != -1;
+       bol--) {}
+  bol++;    // Set it to the first char of the line.
+
+  // Keep track of the beginning of the object.
+  let boo = bol;
+
+  let retain = false;
+  function setState(newState) {
+    if (!retain) {
+      boo = i;
+    }
+    state = newState;
+  }
+
+  let i, c, state = STATES.ETHER;
+  for (i = bol; i < aOffset && aSource[i]; i++) {
+    c = aSource[i].charCodeAt(0);
+    if (state == STATES.ETHER) {
+      if (c == STATES.QUOTE || c == STATES.DQUOTE || c == STATES.SLASH)  {
+        setState(c);
+      }
+      // Unicode identifiers, eg. |var \u0042 = 42;|.
+      else if (c == STATES.BSLASH) {
+        setState(STATES.IDEN);
+        i += 5;
+      } else if (isIdentifierChar(c)) {
+        setState(STATES.IDEN);
+      } else if (retain && c == STATES.CBRACK) {
+        setState(STATES.IDEN);
+        retain = false;
+      }
+    } else if (state == STATES.QUOTE || state == STATES.DQUOTE) {
+      if (c == STATES.BSLASH) {
+        i++;
+      } else if (state == c) {
+        setState(STATES.ETHER);
+      }
+    } else if (state == STATES.SLASH) {
+      if (c == STATES.SLASH) {
+        setState(STATES.COMMENT);
+      } else if (c == STATES.STAR) {
+        // Go fast to the end of the comment.
+        setState(STATES.ETHER);
+        i += aSource.slice(i, aOffset).indexOf("*/") + 2;
+        // If we currently are in a comment, say it.
+        if (i < 2) {
+          setState(STATES.COMMENT);
+          i = aOffset;
+        }
+      } else {
+        setState(STATES.REGEX);
+      }
+    } else if (state == STATES.COMMENT) {
+      if (c == LF || c == 0x2028 || c == 0x2029) {
+        setState(STATES.ETHER);
+      }
+    } else if (state == STATES.REGEX) {
+      if (c == STATES.BSLASH) {
+        i++;
+      } else if (c == STATES.SLASH) {
+        setState(STATES.ETHER);
+      }
+    } else if (state == STATES.IDEN) {
+      if (isWhiteSpace(c)) {
+        retain = true;
+        setState(STATES.IDEN_SP);
+      } else if (c == STATES.BRACK) {
+        retain = true;
+        setState(STATES.ETHER);
+      } else if (PUNCTUATION[c]) {
+        setState(STATES.ETHER);
+      }
+    } else if (state == STATES.IDEN_SP) {
+      // This state starts with retain = true.
+      if (c == STATES.DOT) {
+        setState(STATES.IDEN);
+        retain = false;
+      } else if (c == STATES.BRACK) {
+        setState(STATES.ETHER);
+      } else if (isIdentifierChar(c)) {
+        retain = false;
+        setState(STATES.IDEN);
+      } else if (PUNCTUATION[c]) {
+        retain = false;
+        setState(STATES.ETHER);
+      }
+    }
+  }
+
+  return {
+    state: state,
+    index: boo,
+  };
+}
+
+/**
+ * Check whether the character code point is a (JS) whitespace character.
+ * @param number aCharacter
+ *        Code point for the character to check.
+ * @return boolean
+ *         true if the character is whitespace.
+ */
+function isWhiteSpace(aCharacter) {
+  let c = aCharacter;
+  return (c === 32) || (c === 0x0009) || (c === 0x000B) ||
+    (c === 0x000C) || (c === 0x00A0) ||
+    (c >= 0x1680 &&
+     [0x1680,0x180E,0x2000,0x2001,0x2002,0x2003,0x2004,0x2005,0x2006,0x2007,0x2008,0x2009,0x200A,0x202F,0x205F,0x3000,0xFEFF].indexOf(c) >= 0);
+}
+
+/**
+ * Check whether the character code point is a (JS) start identifier character.
+ * @param number aCharacter
+ *        Code point for the character to check.
+ * @return boolean
+ *         true if the character is an identifier.
+ */
+function isIdentifierChar(aCharacter) {
+  let c = aCharacter;
+  return (// Non-ascii chars are identifiers, but three codes.
+          (c > 128 && c != 0xffff && c != 0x2028 && c != 0x2029) ||
+          // Letters (uppercase, lowercase) are identifier chars.
+          (c > 0x40 && c < 0x5b) || (c > 0x60 && c < 0x7b) ||
+          // $ and _ are identifier chars.
+          c == 0x5f || c == 0x24);
+}
+
+/**
+ * Fetch a long identifier before the caret in a JS source file.
+ * @param string aSource
+ *        JS source code (may not be 100% valid JS on the current line).
+ * @param number aOffset
+ *        Position of the caret. Defaults to the end of the string.
+ * @return string
+ *         Identifier. Can be of the form `foo[bar].baz[`.
+ */
+function getIdentifier(aSource, aOffset = source.length) {
+  // Locate the identifier we read.
+  let f = lineParser(aSource, aOffset);
+  if (f.state == STATES.IDEN) {
+    return aSource.slice(f.index, aOffset);
+  } else return "";
+}
+
diff --git a/browser/devtools/sourceeditor/source-editor-orion.jsm b/browser/devtools/sourceeditor/source-editor-orion.jsm
--- a/browser/devtools/sourceeditor/source-editor-orion.jsm
+++ b/browser/devtools/sourceeditor/source-editor-orion.jsm
@@ -11,6 +11,7 @@ const Ci = Components.interfaces;
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource:///modules/source-editor-ui.jsm");
+Cu.import("resource:///modules/devtools/autocompletion.jsm");
 
 XPCOMUtils.defineLazyServiceGetter(this, "clipboardHelper",
                                    "@mozilla.org/widget/clipboardhelper;1",
@@ -23,9 +24,13 @@ const ORION_IFRAME = "data:text/html;cha
   " href='chrome://browser/skin/devtools/orion-container.css'></head>" +
   "<body style='height:100%;margin:0;overflow:hidden'>" +
   "<div id='editor' style='height:100%'></div>" +
+  // FIXME: do we really need the following line?
+  "<div id='mainPopupSet'></div>" +
   "</body></html>";
 
+
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+const PREF_AUTOCOMPLETE_ENABLED = "devtools.editor.autocomplete.enabled";
 
 /**
  * Maximum allowed vertical offset for the line index when you call
@@ -191,6 +196,8 @@ SourceEditor.prototype = {
   _contextMenu: null,
   _dirty: false,
 
+  _autocomplete: null,
+
   /**
    * The Source Editor user interface manager.
    * @type object
@@ -363,6 +370,14 @@ SourceEditor.prototype = {
 
     this.setMode(config.mode);
 
+    if (this._config.autocompleteEnabled &&
+        Services.prefs.getBoolPref(PREF_AUTOCOMPLETE_ENABLED)) {
+      // The following needs the editor to have its mode set.
+      this._autocomplete = new Autocompletion(this, {
+        getSandbox: this._config.getSandbox,
+      });
+    }
+
     this._undoStack = new UndoStack(this._view, config.undoLimit);
 
     this._dragAndDrop = new TextDND(this._view, this._undoStack);
@@ -459,8 +474,33 @@ SourceEditor.prototype = {
   },
 
   /**
+   * Check whether we should trigger autocompletion.
+   *
+   * @private
+   * @param object aSelection
+   *        Contains the fields {start, end}. Span of the selected text in the
+   *        editor.
+   * @param string aPreviousChar
+   *        Last character inputted.
+   * @return boolean
+   *         True if we should allow autocompletion, otherwise false.
+   */
+  _isAutocompletionAllowed: function SE__isAutocompletionAllowed(aSelection,
+                                                                 aPreviousChar)
+  {
+    if (this._config.autocompleteEnabled &&
+        Services.prefs.getBoolPref(PREF_AUTOCOMPLETE_ENABLED)) {
+      return this._autocomplete && aSelection.start == aSelection.end
+          && /^[a-zA-Z0-9.$_]$/.test(aPreviousChar);
+    } else {
+      return false;
+    }
+  },
+
+  /**
    * The "tab" editor action implementation. This adds support for expanded tabs
-   * to spaces, and support for the indentation of multiple lines at once.
+   * to spaces, support for the indentation of multiple lines at once,
+   * and support for autocompletion.
    * @private
    */
   _doTab: function SE__doTab()
@@ -509,6 +549,15 @@ SourceEditor.prototype = {
       return true;
     }
 
+    // Do autocompletion.
+    let previousChar = this.getText(this.getCaretOffset() - 1,
+                                    this.getCaretOffset());
+    if (this._isAutocompletionAllowed(selection, previousChar)) {
+      // We have the right to autocomplete now.
+      this._autocomplete.cycle();
+      return true;
+    }
+
     return false;
   },
 
@@ -536,6 +585,16 @@ SourceEditor.prototype = {
       indent = (new Array(this._tabSize + 1)).join(" ");
     }
 
+    // Do autocompletion.
+    let previousChar = this.getText(this.getCaretOffset() - 1,
+                                    this.getCaretOffset());
+    if (this._isAutocompletionAllowed(selection, previousChar)) {
+      // We have the right to autocomplete now.
+      this._autocomplete.cycle(-1);
+      return true;
+    }
+
+    // Do selection indentation.
     let lines = [];
     for (let line, i = firstLine; i <= lastLine; i++) {
       line = model.getLine(i, true);
@@ -1834,6 +1893,52 @@ SourceEditor.prototype = {
   },
 
   /**
+   * Returns the line height for a given line index.  Returns the default line
+   * height if the line index is not specified.
+   *
+   * @param number aLineIndex
+   *        The line index.
+   * @return number
+   *         The height of the line in pixels.
+   */
+  getLineHeight: function SE_getLineHeight(aLineIndex)
+  {
+    return this._view.getLineHeight(aLineIndex);
+  },
+
+  /**
+   * Converts the given rectangle from coordinates relative to the document (the
+   * origin being the top-left corner of the first line) to coordinates
+   * relative to the editor view.
+   *
+   * @param object aCoord
+   *        An object with properties x and y. The object is updated to hold the
+   *        converted coordinates.
+   */
+  convertDocumentCoordsToView: function SE_convertDocumentCoordsToView(aCoord)
+  {
+    this._view.convert(aCoord, "document", "page");
+  },
+
+  /**
+   * Text of the line at the given index.
+   *
+   * The valid indices are 0 to line count exclusive.  Returns null
+   * if the index is out of range.
+   *
+   * @param number aLineIndex
+   *        The zero based index of the line.
+   * @param boolean aIncludeDelimiter
+   *        Whether or not to include the line delimiter.
+   * @return String
+   *         The line text or null if out of range.
+   */
+  getLine: function SE_getLine(aLineIndex, aIncludeDelimiter)
+  {
+    return this._model.getLine(aLineIndex, aIncludeDelimiter);
+  },
+
+  /**
    * Setter for the read-only state of the editor.
    * @param boolean aValue
    *        Tells if you want the editor to read-only or not.
@@ -2125,5 +2230,7 @@ SourceEditor.prototype = {
     this._model = null;
     this._config = null;
     this._lastFind = null;
+
+    this._autocomplete = null;
   },
 };
diff --git a/browser/devtools/sourceeditor/source-editor.jsm b/browser/devtools/sourceeditor/source-editor.jsm
--- a/browser/devtools/sourceeditor/source-editor.jsm
+++ b/browser/devtools/sourceeditor/source-editor.jsm
@@ -182,6 +182,21 @@ SourceEditor.DEFAULTS = {
    * @type string|nsIDOMElement
    */
   contextMenu: "sourceEditorContextMenu",
+
+  /**
+   * Autocompletion is turned off by default.
+   * @type boolean
+   */
+  autocompleteEnabled: false,
+
+  /**
+   * This function returns a Sandbox object that can be used for dynamic
+   * analysis of JS.
+   * @see Components.utils.Sandbox
+   *      <https://developer.mozilla.org/en-US/docs/Components.utils.Sandbox>
+   * @type null|function
+   */
+  getSandbox: null,
 };
 
 /**
diff --git a/browser/devtools/sourceeditor/test/Makefile.in b/browser/devtools/sourceeditor/test/Makefile.in
--- a/browser/devtools/sourceeditor/test/Makefile.in
+++ b/browser/devtools/sourceeditor/test/Makefile.in
@@ -32,6 +32,7 @@ MOCHITEST_BROWSER_FILES = \
 		browser_bug729960_block_bracket_jump.js \
 		browser_bug744021_next_prev_bracket_jump.js \
 		browser_bug725392_mouse_coords_char_offset.js \
+		browser_sourceeditor_autocompletion.js \
 		head.js \
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/sourceeditor/test/browser_sourceeditor_autocompletion.js b/browser/devtools/sourceeditor/test/browser_sourceeditor_autocompletion.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/test/browser_sourceeditor_autocompletion.js
@@ -0,0 +1,81 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+let testWin;
+let testDoc;
+let editor;
+
+let temp = {};
+Cu.import("resource:///modules/source-editor.jsm", temp);
+let SourceEditor = temp.SourceEditor;
+
+function test()
+{
+  waitForExplicitFinish();
+
+  const windowUrl = "data:text/xml,<?xml version='1.0'?>" +
+    "<window xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'" +
+    " title='test for autocompletion' width='600' height='500'><hbox flex='1'/></window>";
+  const windowFeatures = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
+
+  testWin = Services.ww.openWindow(null, windowUrl, "_blank", windowFeatures, null);
+  testWin.addEventListener("load", function onWindowLoad() {
+    testWin.removeEventListener("load", onWindowLoad, false);
+    waitForFocus(initEditor, testWin);
+  }, false);
+}
+
+function initEditor()
+{
+  testDoc = testWin.document;
+  let hbox = testDoc.querySelector("hbox");
+  editor = new SourceEditor();
+  editor.init(hbox, {
+    autocompleteEnabled: true,
+    mode: SourceEditor.MODES.JAVASCRIPT,
+  }, editorLoaded);
+}
+
+function editorLoaded()
+{
+  editor.focus();
+
+  let before = "let window = {};\nwin";
+  let after = "";
+  editor.setText(before);
+  editor.setCaretOffset(before.length);
+  EventUtils.synthesizeKey("VK_TAB", {}, testWin);
+  is(editor.getText(), before + "dow", "Static JS autocompletion.");
+
+  before = "let window = {}, winnipeg = 'Manitoba';\nwin";
+  editor.setText(before);
+  editor.setCaretOffset(before.length);
+  EventUtils.synthesizeKey("VK_TAB", {}, testWin);
+  EventUtils.synthesizeKey("VK_TAB", {}, testWin);
+  is(editor.getText(), before + "nipeg", "Autocompletion: cycling twice.");
+
+  EventUtils.synthesizeKey("VK_TAB", {shiftKey: true}, testWin);
+  EventUtils.synthesizeKey("VK_TAB", {shiftKey: true}, testWin);
+  is(editor.getText(), before + "nipeg", "Autocompletion: cycling backwards.");
+
+  before = "let foo = {foo: [function(foobar){\nfoo";
+  after = "\n}]};";
+  editor.setText(before + after);
+  editor.setCaretOffset(before.length);
+  EventUtils.synthesizeKey("VK_TAB", {}, testWin);
+  is(editor.getText(), before + "bar" + after,
+     "Deep static JS autocompletion.");
+
+  testEnd();
+}
+
+function testEnd()
+{
+  editor.destroy();
+  testWin.close();
+  testWin = testDoc = editor = null;
+  waitForFocus(finish, window);
+}
diff --git a/browser/devtools/sourceeditor/test/browser_sourceeditor_initialization.js b/browser/devtools/sourceeditor/test/browser_sourceeditor_initialization.js
--- a/browser/devtools/sourceeditor/test/browser_sourceeditor_initialization.js
+++ b/browser/devtools/sourceeditor/test/browser_sourceeditor_initialization.js
@@ -168,13 +168,6 @@ function editorLoaded()
 
   is(editor.getCaretOffset(), 8, "caret moved to the left");
 
-  EventUtils.synthesizeKey(".", {}, testWin);
-  EventUtils.synthesizeKey("VK_TAB", {}, testWin);
-
-  is(editor.getText(), "code-ed..     aitor", "Tab works");
-
-  is(editor.getCaretOffset(), 14, "caret location is correct");
-
   // Test the Tab key.
 
   editor.setText("a\n  b\n c");
diff --git a/browser/devtools/webconsole/AutocompletePopup.jsm b/browser/devtools/webconsole/AutocompletePopup.jsm
--- a/browser/devtools/webconsole/AutocompletePopup.jsm
+++ b/browser/devtools/webconsole/AutocompletePopup.jsm
@@ -80,7 +80,7 @@ AutocompletePopup.prototype = {
    * @param nsIDOMNode aAnchor
    *        Optional node to anchor the panel to.
    */
-  openPopup: function AP_openPopup(aAnchor)
+  openPopup: function AP_openPopup(aAnchor = null)
   {
     this._panel.openPopup(aAnchor, "after_start", 0, 0, false, false);
 
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -1197,10 +1197,10 @@ function JSPropertyProvider(aScope, aInp
  * @return object
  *         Object whose keys are all accessible properties on the object.
  */
-function getMatchedProps(aObj, aOptions = {matchProp: ""})
+function getMatchedProps(aObj, aOptions)
 {
   // Argument defaults.
-  aOptions.matchProp = aOptions.matchProp || "";
+  aOptions = aOptions || {matchProp: ""};
 
   if (aObj == null) { return {}; }
   try {
